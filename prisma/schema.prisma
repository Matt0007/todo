
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üë§ USER NEXTAUTH COMPATIBLE
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // üîê NEXTAUTH RELATIONS
  accounts      Account[]
  sessions      Session[]
  
  // üìù NOS DONN√âES M√âTIER
  todos         Todo[]
  categories    Category[]

  @@map("users")
}

// üîê TABLES NEXTAUTH OBLIGATOIRES
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// üìù NOS MOD√àLES M√âTIER (inchang√©s)
model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    Priority  @default(NORMAL)
  
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("todos")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   // Obligatoire !
  emoji     String?
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  todos     Todo[]
  
  createdAt DateTime @default(now())
  
  @@unique([userId, name])
  @@map("categories")
}

enum Priority {
  LOW
  NORMAL
  HIGH
}

